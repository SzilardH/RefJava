package hu.elte.refjava.lang.tests.compiler;

import com.google.inject.Inject;
import hu.elte.refjava.lang.tests.RefJavaInjectorProvider;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(RefJavaInjectorProvider.class)
@SuppressWarnings("all")
public class RefJavaCompilerTests {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void compileSchemeTypes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package file.test;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("local refactoring localTest()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.newLine();
      _builder.append("block refactoring blockTest()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.newLine();
      _builder.append("lambda refactoring lambdaTest()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.newLine();
      _builder.append("class refactoring classTest()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("MULTIPLE FILES WERE GENERATED");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 1 : /myProject/./src-gen/file/test/blockTest.java");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("package file.test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.BlockRefactoring;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class blockTest extends BlockRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public blockTest() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"nothing\", \"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 2 : /myProject/./src-gen/file/test/classTest.java");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("package file.test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.ClassRefactoring;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class classTest extends ClassRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public classTest() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"nothing\", \"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 3 : /myProject/./src-gen/file/test/lambdaTest.java");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("package file.test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.LambdaRefactoring;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class lambdaTest extends LambdaRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public lambdaTest() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"nothing\", \"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 4 : /myProject/./src-gen/file/test/localTest.java");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("package file.test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.LocalRefactoring;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class localTest extends LocalRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public localTest() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"nothing\", \"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileSchemeWithTargetClosure() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package test;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("block refactoring test()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("target");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.BlockRefactoring;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class test extends BlockRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public test() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"nothing\", \"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("protected boolean safeTargetCheck() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return super.targetCheck(\"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileSchemeWithPrecondition() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package test;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("local refactoring test()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("when");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("precondition");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("isSingle(target) ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("&& true == true");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.Check;");
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.LocalRefactoring;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class test extends LocalRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public test() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"nothing\", \"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private boolean instanceCheck() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return (Check.isSingle(bindings.get(\"target\")) && (true == true));");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("protected boolean check() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return super.check() && instanceCheck();");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileSchemeWithAssignments() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package test;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("local refactoring test()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nothing");
      _builder.newLine();
      _builder.append("when");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("assignment");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("name#N = \"TEST\" ;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("type#T = type(target) ;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("visibility#V = visibility(target) ;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("parameter#P = parameters(target)");
      _builder.newLine();
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.Check;");
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.LocalRefactoring;");
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.lang.refJava.Visibility;");
      _builder_1.newLine();
      _builder_1.append("import java.util.List;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.jdt.core.dom.SingleVariableDeclaration;");
      _builder_1.newLine();
      _builder_1.append("import org.eclipse.jdt.core.dom.Type;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class test extends LocalRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public test() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"nothing\", \"nothing\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private String valueof_name_N() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return \"TEST\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private void set_name_N() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("nameBindings.put(\"N\", valueof_name_N());");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private Type valueof_type_T() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Type _type = Check.type(bindings.get(\"target\"));");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _type;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private void set_type_T() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("typeBindings.put(\"T\", valueof_type_T());");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private List valueof_visibility_V() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Visibility _visibility = Check.visibility(bindings.get(\"target\"));");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _visibility;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private void set_visibility_V() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("visibilityBindings.put(\"V\", valueof_visibility_V());");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private List valueof_parameter_P() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("List<SingleVariableDeclaration> _parameters = Check.parameters(bindings.get(\"target\"));");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return _parameters;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private void set_parameter_P() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("parameterBindings.put(\"P\", valueof_parameter_P());");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("protected void setMetaVariables() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("set_name_N();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("set_type_T();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("set_visibility_V();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("set_parameter_P();");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.matchingTypeReferenceString = \"\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.replacementTypeReferenceString = \"\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.targetTypeReferenceString = \"\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.definitionTypeReferenceString = \"\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileSchemeWithTypeRefStrings() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package test;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("class refactoring test()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("int a ; char b ;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("~~~~~~~~~~~~~~");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("double c ; long d ; String e ;");
      _builder.newLine();
      _builder.append("target");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void f(boolean b) { }");
      _builder.newLine();
      _builder.append("definition");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("byte b ; short s ;");
      _builder.newLine();
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package test;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import hu.elte.refjava.api.ClassRefactoring;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class test extends ClassRefactoring {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("public test() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super(\"int a ; char b ;\", \"double c ; long d ; String e ;\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("protected void setMetaVariables() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.definitionString = \"byte b ; short s ;\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.matchingTypeReferenceString = \"int|char|\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.replacementTypeReferenceString = \"double|long|java.lang.String|\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.targetTypeReferenceString = \"void|boolean|\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("super.definitionTypeReferenceString = \"byte|short|\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("protected boolean safeTargetCheck() {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return super.targetCheck(\"public void f(boolean b) { }\");");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
